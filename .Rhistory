summary(result$coda.sam))
summary(result$coda.sam)
options(scipen = 1, digits = 4, width = 80)
fdp <- read.csv("fdpfinal.csv", sep = ',', header = TRUE)
head(fdp)
fdp['Rank'] = fdp$OffRnk5Wks
mod.classic = lm(FanDuelPts ~ AvgPts5Wks, data = fdp)
plot(FanDuelPts ~ AvgPts5Wks, data = fdp)
library(knitr)
#fdp_train=fdp[fdp$Year == 2015, ]
fdp_train=fdp[fdp$Year == 2016  & ((fdp$Position == "QB"& fdp$FanDuelSalary > 6500 & !is.na(fdp$FanDuelSalary))|fdp$Position == "PK"), ]
#fdp_train=fdp[fdp$Year == 2015 & (fdp$Position == "QB" | fdp$Position == "RB") & fdp$FanDuelSalary > 6500 & !is.na(fdp$FanDuelSalary), ]
fdp_test =fdp_train[fdp_train$YearWeek >= 201615, ]
fdp_test = droplevels(fdp_test)
fdp_train=fdp_train[fdp_train$YearWeek < 201615, ]
fdp_train = droplevels(fdp_train)
Use.Rank = TRUE
Num.Opponent = length(unique(fdp_train[, "Opponent"]))
Num.Position = length(unique(fdp_train[, "Position"]))
#Num.fixed.pred=2 #AvgOppPAP7Wks + FanDuelSalary
Num.fixed.pred=1 #AvgOppPAP7Wks
if (Use.Rank) {
Num.Rank = length(unique(fdp_train[, "Rank"]))
Num.HomeAwayInit = Num.Rank
Model.File.Ext = ""
} else {
Num.HomeAwayInit = 1
Model.File.Ext = ".norank"
}
if (Num.Position == 1) {
#X.defense = model.matrix(~ 0 + AvgOppPAP7Wks + FanDuelSalary, data=fdp_train)
X.defense = model.matrix(~ 0 + AvgOppPAP7Wks, data=fdp_train)
if (Use.Rank) {
X.home = model.matrix(~ 0 + Rank , data=fdp_train)
X.away = model.matrix(~ 0 + Rank , data=fdp_train)
} else {
X.home = rep(1, nrow(fdp_train))
X.away = rep(1, nrow(fdp_train))
}
} else {
#X.defense = model.matrix(~ 0 + AvgOppPAP7Wks:Position + FanDuelSalary:Position, data=fdp_train)
X.defense = model.matrix(~ 0 + AvgOppPAP7Wks:Position, data=fdp_train)
if (Use.Rank) {
X.home = model.matrix(~ 0 + Rank:Position , data=fdp_train)
X.away = model.matrix(~ 0 + Rank:Position , data=fdp_train)
} else {
X.home = model.matrix(~ 0 + Position , data=fdp_train)
X.away = model.matrix(~ 0 + Position , data=fdp_train)
}
}
X.home = X.home * fdp_train$HomeGame
X.away = X.away * (1- fdp_train$HomeGame)
X = cbind(X.defense, X.home, X.away)
head(X.defense)
head(X.home)
library(rjags)
set.seed(20171008)
# Initialization List for the 4 chains
jags.inits=list(
list( sigmasqinv=    0.01,  delta = rep(-100000, Num.Position * Num.fixed.pred),
eta = c(100000, -100000, 100000, -100000)[1:Num.HomeAwayInit],
rho = c(-100000, 100000, -100000, 100000)[1:Num.HomeAwayInit],
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 20171008 ),
list( sigmasqinv=    0.01,  delta = rep(100000, Num.Position * Num.fixed.pred),
eta = c(100000, -100000, -100000, 100000)[1:Num.HomeAwayInit],
rho = c(-100000, 100000, 100000, -100000)[1:Num.HomeAwayInit],
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 20171008 + 1 ),
list( sigmasqinv=0.000001,  delta = rep(-100000, Num.Position * Num.fixed.pred),
eta = c(-100000, 100000, -100000, 100000)[1:Num.HomeAwayInit],
rho = c(100000, -100000, 100000, -100000)[1:Num.HomeAwayInit],
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 20171008 + 2 ),
list( sigmasqinv=0.000001,  delta = rep(100000, Num.Position * Num.fixed.pred),
eta = c(-100000, 100000, 100000, -100000)[1:Num.HomeAwayInit],
rho = c(100000, -100000, -100000, 100000)[1:Num.HomeAwayInit],
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 20171008 + 3 )
)
data.jags <- list(
y= fdp_train$FanDuelPts,
alpha = fdp_train$AvgPts5Wks,
X.defense = X.defense,
X.home = X.home,
X.away = X.away,
Num.fixed.pred=Num.fixed.pred,
Num.Position=Num.Position,
#Num.Opponent=Num.Opponent,
Num.Rank=Num.Rank
)
burnAndSample = function(m, N.burnin, N.iter, show.plot, mon.col, n.thin=1) {
update(m, N.burnin) # burn-in
x <- coda.samples(m, mon.col, n.iter=N.iter, n.thin)
if(show.plot) {
plot(x, smooth=FALSE)
}
gelman.R = gelman.diag(x, autoburnin=FALSE, multivariate = FALSE)
result <- list(
coda.sam = x,
gelman.R.max=max(gelman.R$psrf[, 1]),
gelman.R = gelman.R
)
return(result)
}
runModel=TRUE
runSample=TRUE
mon.col <- c("delta", "eta", "rho", "beta.defense", "beta.home", "beta.away", "sigmasq")
NSim = 30000
NChain = 4
NThin = 5
NTotalSim = NSim * NChain / 5
if (runModel) {
m <- jags.model("fdp.bug", data.jags, inits = jags.inits, n.chains=NChain, n.adapt = 1000)
save(file=paste("fdp.jags.model.init", Model.File.Ext, ".Rdata", sep=""), list="m")
} else {
load(paste("fdp.jags.model.init", Model.File.Ext, ".Rdata", sep=""))
m$recompile()
}
load.module("dic")
N.Retry.Loop = 1
if (runSample) {
N.burnin=2500/2
for (loopIdx in 1:N.Retry.Loop) {
(start_time <- Sys.time())
(N.burnin = N.burnin * 2)
result = burnAndSample(m, N.burnin, NSim, show.plot=FALSE, mon.col = mon.col, n.thin=NChain)
(end_time <- Sys.time())
(result$gelman.R.max)
}
run.params = paste(".", N.burnin, ".", NChain, ".", NSim, ".", NThin, sep="")
save(file=paste("fdp.jags.samples", run.params, Model.File.Ext, ".Rdata", sep=""), list="result")
save(file=paste("fdp.jags.model", run.params, Model.File.Ext, ".Rdata", sep=""), list="m")
} else {
N.burnin=2500/2 * (2**N.Retry.Loop)
run.params = paste(".", N.burnin, ".", NChain, ".", NSim, ".", NThin, sep="")
load(paste("fdp.jags.samples", run.params, Model.File.Ext, ".Rdata", sep=""))
load(paste("fdp.jags.model", run.params, Model.File.Ext, ".Rdata", sep=""))
m$recompile()
}
plot(result$coda.sam, smooth=FALSE)
result$gelman.R
